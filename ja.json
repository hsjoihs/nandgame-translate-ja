{
  "missions": {
    "RELAY_NAND": {
      "title": "Nand",
      "splash": "<p><b>Nand Game</b>へようこそ！</p>\n<p>このゲームでは、基本的な部品（コンポーネント）からスタートして、コンピュータを組み上げていきます。\n  <div><p>このゲームは、順番にステージをこなす構成となっています。\n 各ステージでは、仕様に従って動作するコンポーネントを作成することが求められます。\n 作成したコンポーネントは、以降のステージで、新たに物を組み立てるための部品として使用できます。\n\n<p>このゲームでは、コンピュータアーキテクチャやソフトウェアについての事前知識は<b>一切</b>必要ありませんし、足し算や引き算以外の数学的なスキルも必要ありません。\n （ただし、解くのに結構時間がかかりそうなタスクもそこそこあるので、忍耐力は必要ですよ～）\n\n </div> <p>最初のタスクは、<b>nand</b>という部品を作成することです。\n <p>図の左側に、このタスクで作り上げるべき部品の厳密な仕様が載っています。\n 「ステージのヒント」をクリックすると、追加のお役立ち情報を見ることができます。",
      "specification": "<p>今回のタスクは、入力 <b>a</b> と <b>b</b> が両方とも 1 のときに出力が 0 になるように、入力を出力へとワイヤーやリレーで接続することです。</p>\n\n<p><b>1</b> は電流が流れていることを表し、<b>0</b> は電流が流れていないことを表します。</p>\n<p><b>V</b> 入力は常に電流が流れている状態です。つまり、常に 1 を保っています。</p>\n<p>厳密な仕様は以下の通りです。",
      "elaboration": "<p><b>nand</b>コンポーネント（nand ゲートともいう）は、論理回路を構成する上で根幹をなす部品です。nand ゲートだけを使って、あらゆる計算をこなす論理回路を構築することができます。だからこそ、まず nand ゲートを作成することから始めるのです。</p>\n\n<p><b>リレー</b>は、電気で制御されるスイッチで、制御信号によってスイッチのオンとオフが切り替わります。制御電流が電磁石に流れたり流れなかったりすることで、その電磁石の力で接点がオンやオフの位置へと動きます。</p>\n\n<p>初期の電子計算機は電磁リレーで作られていましたが、今日のコンピュータはトランジスタで作られています。トランジスタは、リレーと同様、スイッチとして振る舞う装置です。ただし、トランジスタにはリレーと違い物理的・機械的に動くパーツが一切ないため、リレーよりも（はるかに）小型で、安価で、しかも高速に動作することができます。\n\nリレーの方が仕組みを説明しやすいので、Nandgameではリレーを使用していますが、機能としてはリレーとトランジスタは同様のものです。一度 nand コンポーネントを作成してしまえば、それがリレーで作られているかトランジスタで作られているかは気にしなくて良くなるのです。\n",
      "spoilers": {
        "0": "リレーを使って 2 段階の処理を行います。最初のリレーでは、入力 a と b が両方とも 1 のときに 1 を出力します。次に、2 つ目のリレーで最初のリレーの出力を反転させ、1 を 0 に、0 を 1 に変えます。"
      },
      "hints": {
        "drag": "<b>ステップ1:</b> ツールボックスからコンポーネントをドラッグして、青いエリアに配置します。\n",
        "tap": "<b>ステップ2:</b> 配線を繋げるには、三角形をタップまたはドラッグしましょう。",
        "tap-end": "コンポーネントの（丸い）入力端子をタップすると、配線が繋がります。",
        "truth": "作成すべきコンポーネントの仕様: <p>どの入力に対しても、正しい出力をすること。",
        "toggle": "チェックボックスをクリックして入力信号を切り替え、回路にどのように影響するかを確認しましょう。",
        "verify": "コンポーネントが正しく設計できたと思ったら、ここをクリックしてください。"
      },
      "debriefing": "<b>nand</b>コンポーネントがツールボックスに追加され、次のステージで組み立ての部品として使用できるようになりました。"
    },
    "INV": {
      "title": "反転",
      "splash": "<p>次のタスクは、<b>nand</b>コンポーネントを使って<b>インバータ</b>（否定回路）コンポーネントを作成することです。</p>\n<p></p> \n<p>このステージからは、根底にあるスイッチの仕組みを考慮する必要はありません。物理的な nand ゲートでは電源への接続が必要ですが、図にこれを示す必要はありません。すべてのコンポーネントは暗黙のうちに電源に接続されているものとします。これからは、論理的な入力と出力に集中しましょう。</p>\n",
      "specification": "<p>次のタスクは、否定回路（インバータ、<b>inv</b>) コンポーネントを作成することです。</p>\n\n<p><b>inv</b>コンポーネントは、単一の入力と単一の出力を持ちます。\n<p>出力は入力の反対になるようにしてください。つまり、1 の場合は 0 を、0 の場合は 1 を出力しましょう。\n",
      "hints": {
        "0": "<b>nand</b>コンポーネントがツールボックスに追加されました。"
      }
    },
    "AND": {
      "title": "AND",
      "splash": "<p>次のタスクは、<b>nand</b>コンポーネントと<b>inv</b>コンポーネントだけを使って<b>AND</b>ゲートを作成することです。\n （このタスクは、どちらか一方のコンポーネントだけで解けるかもしれません。）",
      "specification": "<p><b>AND</b>ゲートの出力は、両方の入力が 1 のときに 1 になります。",
      "spoilers": {
        "0": "実は、\"NAND\" は \"NOT AND\" の略です。\n\n（訳注：原文は「\"NAND\" は \"Negative AND\" の略である」と主張していますが、Oxford English Dictionary によると not + and が語源とのことです。）"
      }
    },
    "OR": {
      "title": "OR",
      "specification": "<p><b>OR</b>ゲートの出力は、少なくとも1つの入力が1のときに1になります。</p>"
    },
    "XOR": {
      "title": "XOR",
      "specification": "<p><b>XOR</b>ゲートの出力は、2つの入力が異なるときに1になります。</p>",
      "elaboration": "XOR は <u>Exclusive OR</u> の略です。Exclusive とは「排他的」という意味です。<u>a または b のどちらか一方が 1 であり（これが「OR」）、両方が 1 というわけでない（これが「排他的」）</u>ことを意味します。"
    },
    "HALFADD": {
      "title": "半加算器",
      "splash": "<p>おめでとうございます。基本となる論理ゲートを作成できました。</p>\n<p>次のステップは、算術演算です。プロセッサは、数値を加算および減算できる必要があります。</p>\n\n<p>最初のタスクは、1ビットの数値を2つ足し合わせることです。結果は2ビットの数値になります。</p>\n<p>これを解くには、2進法の仕組みを理解している必要があります。</p>",
      "specification": "<p>2つのビットを足し合わせて2ビットの値を出力する<b>加算（add）</b>コンポーネントです。</p>\n<p><b>h</b>出力は上位 (high) ビット、<b>l</b>は下位 (low) ビットです。</p>",
      "elaboration": "<div class=subject>\n\n <h3>2進法</h3>\n\n <p>コンピュータは<b>2進法</b>を使用して算術演算を行います。</p>\n\n <p>我々が普段慣れ親しんでいる、0 から 9 の数字を使って数を書く通常の書き方と異なり、2進法では、すべての数値が 0 と 1 という数字だけを使って表されます。</p>\n\n <p>例:</p>\n\n <table class=data>\n <tr><th>2進法</th><th>10進法</th></tr>\n <tr><td>00</td><td>0</td></tr>\n <tr><td>01</td><td>1</td></tr>\n <tr><td>10</td><td>2</td></tr>\n <tr><td>11</td><td>3</td></tr>\n </table>\n\n2進法を理解するには、まず10進法の仕組みを考えてみましょう。10種類の異なる数字がありますが、桁の位置を調整することで任意の大きな数字を表現できます。3桁の数では、一番右の桁が1の位、右から2番目が10の位、右から3番目が100の位、というように続きます。\nということで、たとえば 273 は 2 × 100 + 7 × 10 + 3 × 1 です。各桁は 10 の累乗に対応しているので、これは「<u>10進法</u>」で数を表現している、と言います。\n\n<p>2進法では、0 と 1 の2つの数字だけが使用されます。2進法では各桁が 2 の累乗に対応しており、1の位、2の位、4の位、8の位、と続きます。\nということで、たとえば 2進法で 101 と書いたら 10進法でいう 5 に相当します（1 × 4 + 0 × 2 + 1 × 1）。離散的システムにおける2種類の状態を数字の 0 と 1 に対応するようにさせることができるので、2進法はデジタル回路に最適なのです。</p>\n\n<p><a href=\"https://www.mathsisfun.com/binary-number-system.html\">詳しくはこちら（英語）</a></p>\n<p><a href=\"https://www.cc.kyoto-su.ac.jp/~kbys/kiso/number/number1.html\">詳しくはこちら（日本語）</a></p>\n\n</div>\n"
    }
  }
}